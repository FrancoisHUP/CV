### Directory Structure ###
Directory structure:
â””â”€â”€ francoishup-puissance4/
    â”œâ”€â”€ README.md
    â”œâ”€â”€ classDiag.puml
    â”œâ”€â”€ objectDiag.puml
    â”œâ”€â”€ pom.xml
    â”œâ”€â”€ sequenceDiag.puml
    â”œâ”€â”€ test1.puml
    â”œâ”€â”€ src/
    â”‚   â”œâ”€â”€ .DS_Store
    â”‚   â”œâ”€â”€ main/
    â”‚   â”‚   â”œâ”€â”€ .DS_Store
    â”‚   â”‚   â””â”€â”€ java/
    â”‚   â”‚       â”œâ”€â”€ Main.java
    â”‚   â”‚       â”œâ”€â”€ .DS_Store
    â”‚   â”‚       â””â”€â”€ com/
    â”‚   â”‚           â”œâ”€â”€ .DS_Store
    â”‚   â”‚           â””â”€â”€ inf5153/
    â”‚   â”‚               â”œâ”€â”€ .DS_Store
    â”‚   â”‚               â””â”€â”€ game/
    â”‚   â”‚                   â”œâ”€â”€ ConnectFour.java
    â”‚   â”‚                   â””â”€â”€ .DS_Store
    â”‚   â””â”€â”€ test/
    â”‚       â””â”€â”€ java/
    â”‚           â””â”€â”€ ConnectFour.java
    â””â”€â”€ .github/
        â””â”€â”€ workflows/
            â”œâ”€â”€ java.yml
            â””â”€â”€ puml.yml


### Code Content ###
================================================
File: README.md
================================================
# Projet individuel : Jeu du Puissance4
## Les objectifs du projet : 
1. Analyser un code lÃ©gataire en vue de le faire Ã©voluer;
2. Transformer ce code en vÃ©ritable application orientÃ©e objet;
3. Faire Ã©voluer un code objet en respectant dans la mesure du possible :
  * les principes S et O de SOLID;
  * les principes objet de faible couplage / forte cohÃ©sion.
4. DÃ©crire une application orientÃ©e objet avec le langage UML (diagrammes d'objets, de sÃ©quences et de classes).
5. Les ateliers sont des temps oÃ¹ l'Ã©quipe enseignante est prÃ©sente pour vous donner de la rÃ©tro-action sur votre projet. Il est vital de profiter de ce temps de travail prÃ©vu dans votre emploi du temps pour amÃ©liorer vos projets avant la remise finale.

## Consignes
1.  Votre projet doit Ãªtre sur git Ã  23:55 (heure de MontrÃ©al) le jour de la date de remise.
2.  Le projet contient votre code et et un ficher PDF
3.  Le fichier PDF contient les rÃ©ponses aux questions et vos trois modÃ¨les UML
4.  Vous devez rÃ©pondre en franÃ§ais aux quatre (4) questions posÃ©es dans ce sujet.
5.  Le fichier porte comme nom votre code permanentÃ©. 
6.  Votre code doit compiler et tester (sans Ã©chouer) en lanÃ§ant la commande mvn clean package Ã  la racine de votre projet.
7.  Votre code doit se lancer depuis la ligne de commande, toujours depuis la racine, par exemple :
  * mvn -q exec:java "
  * Toute remise ne respectant pas ces consignes ne sera pas Ã©valuÃ©e et obtiendra la note de zÃ©ro (0).

## SpÃ©cification

### Puissance 4
Puissance 4 est un jeu de stratÃ©gie trÃ¨s connu qui convient Ã  tout le monde.

Comment jouer : DÃ©posez vos disques dans les colonnes de la grille du jeu en appuyant sur la colonne choisie. Faites une ligne d'au moins quatre jetons soit verticalement, horizontalement ou en diagonale avant votre adversaire.

## Le travail Ã  rÃ©aliser

### Ã‰tape 1 :  RÃ©cupÃ©ration du code lÃ©gataire
* RÃ©cupÃ©rer le code sur ce lien : [https://github.com/INF5153-A21-40/puissance4.git](https://github.com/INF5153-A21-40/puissance4.git)
* Pour exÃ©cuter le code, exÃ©cuter les commandes suivantes : 
  * mvn package
  * mvn -q exec:java "
	

### Etape 2 : Analyser le code lÃ©gataire
Le code source lÃ©gataire fourni est stockÃ© dans le repertoire src/main/java, en respect des conventions Maven. La classe com.inf5153.game contient l'implÃ©mentation de dÃ©part d'un programme rÃ©pondant aux spÃ©cifications du jeu. La Main est une classe client qui utilise les mÃ©thodes publique de la classe ConnectFour  pour simuler le jeu.


####  Question 1 : Ã‰volution du code lÃ©gataire : 
Le client souhaite dÃ©velopper une librairie pour dÃ©velopper  des jeux tels que le jeu Puissance 4 et jeu de dames.
Est-que lâ€™implÃ©mentation actuelle est Ã©volutive pour supporter la spÃ©cification dâ€™un jeu semblable ?	
Sans implÃ©menter, expliquez comment le code devrait Ãªtre modifiÃ© pour prendre en compte une telle Ã©volution.

####  Question 2 : Analyse des dÃ©fauts du code lÃ©gataire : 
Analysez ce code en fonction de votre connaissance de la programmation objet et des principes de gÃ©nie logiciels vu dans le cours, et dressez une liste des dÃ©fauts qu'il contient, en donnant des exemples des situations qui sont problÃ©matique dans le code. Si un dÃ©faut est rÃ©pÃ©tÃ© Ã  plusieurs endroits dans le code, n'en donnez pas la liste exhaustive, ce n'est pas utile, un exemple suffit.

### Etape 3 : RÃ©-usinage en code objet 
En restant dans le paquetage uqam.inf5153.game, identifiez un ensemble de concepts (c.Ã .d des classes, des interfaces, des Ã©numÃ©rations) qui permettront de travailler au bon niveau d'abstraction de la logique d'affaire du projet et en mÃªme temps obÃ©ir Ã  la spÃ©cification du jeu. Par exemple, changer la reprÃ©sentation des cases dâ€™une reprÃ©sentation basÃ©es sur les indices dans le tableau grille vers des classes cellules.
* DÃ©veloppez le code java (logique d'affaire + tests unitaires) mettant en Å“uvre votre systÃ¨me d'arbitrage.
Proposez une conception permettant de reprÃ©senter le jeux Puissance 4 et des Ã©chelles sous la forme dâ€™une application orientÃ©e objet. Vous reprÃ©senterez cette conception sous la forme dâ€™un diagramme de classe UML.
* DÃ©crivez en utilisant un diagramme de sÃ©quence comment se dÃ©roule un tour de jeu depuis l'invocation de la classe Main par l'utilisateur jusqu'Ã  l'annonce du gagnant
*Un diagramme d'objet montrant une instanciation possible de vos concepts lors du tour
Dans vos modÃ¨les, ne reprÃ©sentez que les Ã©lÃ©ments pertinents pour la comprÃ©hension de votre projet, les dÃ©tails techniques (p.-ex- accesseurs et modificateurs dans le diagramme de classe, appels de fonctions interne helper dans le diagramme de sÃ©quence) sont Ã  laisser dans le code.


### Ã‰tape 4 : Analyse du code objet

Maintenant que le code est rÃ©usinÃ© et que l'Ã©volution fonctionnelle Ã  Ã©tÃ© mise en Å“uvre, il convient de prendre du recul sur le code dÃ©veloppÃ© pour Ãªtre capable de l'analyser.
#### Question 3: Justification des choix de conceptions
Justifiez le choix des concepts que vous avez identifiÃ© dans votre modÃ¨le de conception, particuliÃ¨rement en expliquant comment votre modÃ¨le respecte les propriÃ©tÃ©s architecturales demandÃ©es.
Expliquez comment votre conception actuelle du projet respecte les principes de responsabilitÃ© unique (S de SOLID) et d'Ouvert/fermÃ© (O de SOLID).
Si vous pensez que votre conception souffre de certaines faiblesses, indiquez les, et expliquez pourquoi ce sont des faiblesses.
#### Question 4 : Ã‰volution du code objet
Expliquez en quelques lignes comment il sera possible de rÃ©utiliser votre conception pour permettre de dÃ©finir le jeu des dames Ã  partir des abstractions identifiÃ©es dans puissance 4.

## Grille dâ€™Ã©valuation

| Ã‰lÃ©ment   | CritÃ¨re dâ€™Ã©valuation                       | Note (/100) |
|-----------|--------------------------------------------|-------------|
| Questions | (#1) Ã‰volution du code lÃ©gataire           | /5          |
|           | (#2) Analyse des dÃ©fauts du code lÃ©gataire | /10         |
|           | (#3) Justification des choix de conception | /15         |
|           | (#4) Ã‰volution de code objet               | /5          |
| ModÃ¨les   | Justesse et pertinence de la conception    | /15         |
|           | CohÃ©rence inter-modÃ¨les                    | /5          |
|           | Respect des principes de conception        | /15         |
| Code      | QualitÃ© du code Java                       | /10         |
|           | CohÃ©rence du code avec les modÃ¨les         | /10         |
|           | QualitÃ© des tests                          | /10         |


## ðŸ“š  Resources 
* Jeu des dames [http://www.ffjd.fr/Web/index.php?page=reglesdujeu](http://www.ffjd.fr/Web/index.php?page=reglesdujeu
* Jeu de puissance 4 [https://fr.wikipedia.org/wiki/Puissance_4](https://fr.wikipedia.org/wiki/Puissance_4)



================================================
File: classDiag.puml
================================================
@startuml

Title Diagramme de classes

class Game {
    -Player[] players
    -Piece [] peices
    -StandardDice standardDice
    -Board board
    -int numberPlayer

    -setUpGame() // set numberplayer
    -initGame() // create Objets set Board
    -createObjects()
    -assignPieceToPLayer()
    -applyCellEffect()
    -setWinnerIfplayerWin(Player player)
    -setEndGameIfGameOverCondition()
}

class Player {
    -String name;
    -Piece piece;

    -assingPiece(Piece piece)
    -rollSixFaceDice(StandardDice sixFaceDice)
    -boolean finishedGame()
    -turn()
    -playerRollDice(Player player)
    -movePlayerPiece(Piece playerPiece, int diceRoll)
}


class Cell {
    -Position POSITION;
    +Position getPosition()
}

class Position {
    -int posLine
    -int posColumn
    -int WIDTH = Board.STANDARD_WIDTH

    +{static} Position getPosition(int cellId)
    +{static} int getCellId(Position position)
    +Position plus(int number)
    +boolean isBefore(Position position)
    +boolean isValid(Position position)
}

class Piece {
    - Position position
    - boolean onFinishCell = false

    + Position getPosition()
    + void moveTo(Position positionDestination)
    + void setOnFinishCell()
}

package "Utils" {
    class InputHandler {
        + int getNumberPlayer() throws NumberOfPlayerException
        - int getInteger() throws NumberFormatException
        + String getPlayerName()
        + void getEnter()
    }

    class OutputHandler {
        + {static} void skipLine()
        + {static}  void welcoming()
        ...()
    }
}

class Cell implements CellEffect {
    -Position position
    -CellType getCellType()
    ^getCellType()
    ^applyEffect()
}

interface CellEffect {
    -getCellType()
    -applyEffect()
}

class MovingCell extends Cell  {
    - Position destinationPosition
    - CellType cellType
    ^getCellType()
    ^applyEffect()
}

class FinishCell extends Cell {
    - CellType cellType
    ^getCellType()
    ^applyEffect()
}

class Board {
    -Cell CELLS[]
    -getCell(Position position)
    -setUp(Piece [] peices)
}

class CellFactory {
    -HashMap<Integer,Integer> MOVING_CELLS
    -createCells(int boardDimension)
    -createFinishCell()
}

enum CellType {
    LADDER,
    SNAKE,
    NORMAL,
    FINISH
}

Board --"build" CellFactory
Cell *- CellType



Game *-- Board
Board *-- Cell
Game *-- Player
Cell *--Position
Piece ->"possede" Position
Player *-- Piece
Game --> OutputHandler
Game *-- InputHandler
Player *-- InputHandler

@enduml


================================================
File: objectDiag.puml
================================================
@startuml

Title Diagramme de d'objet

object Game
    Game : players
    Game : peices
    Game : standardDice
    Game : board
    Game : numberPlayer


object Player {
    Player : name
    Player : piece

}

object Board {
    Board : CELLS
    Board : SIZE
    Board : WIDTH

}

object Cell {
    Cell : POSITION
}

object Position {
    Position : posLine
    Position :  posColumn
    Position : WIDTH

}

object Piece {
    Piece : position;
    Piece : onFinishCell = false;
}

object Cell {
    Cell : position
}

object MovingCell {
    MovingCell : destinationPosition
    MovingCell : cellType;
}

object FinishCell {
    FinishCell: cellType;
}

object CellFactory {
    CellFactory : MOVING_CELLS
}

Board --"build" CellFactory
Game "1"*--"1" Board
Board "1"*--"*" Cell
Game "1"*--"1..*" Player
Cell "1"*--"1" Position
Piece "1"->"1" Position
Player "1"*--"1" Piece
Cell <|-- MovingCell
Cell <|-- FinishCell

@enduml


================================================
File: pom.xml
================================================
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <packaging>jar</packaging>

    <groupId>inf5153</groupId>
    <artifactId>Puissance4-StarterCode</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>UQAM :: Puissance 4 </name>
  
    <properties>
    	<maven.compiler.source>1.8</maven.compiler.source>
    	<maven.compiler.target>1.8</maven.compiler.target>
	<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.6.0</version>
                <configuration>
                    <mainClass>Main</mainClass>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <dependencies>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>

================================================
File: sequenceDiag.puml
================================================
@startuml

Title Diagrame de sequence

[-> Game: new Game()
activate Game

Game -> Game : setUpNumberOfPlayer()
Game -> Game : init()
activate Game
Game -> Player : createPlayers()
    activate Player
Game -> Game : createObjects()
activate Game
Game -> Board : createBoard(Board.STANDARD_DIMENSION);
    activate Board
    Board -> CellFactory : new()
    activate CellFactory
    Board -> CellFactory : build()
        activate CellFactory
        CellFactory -> Cell : createCells()
            activate Cell
        deactivate CellFactory
    deactivate CellFactory
Game -> Piece : createPeices()
    activate Piece
Game -> Dice : createDice()
    activate Dice
deactivate Game
deactivate Game
Game -> Player : assignPieceToPLayer()
Player -> Piece : assingPiece()
Game -> Board : setup()
Board -> Piece : positionPiecesToStartingCell()
Piece -> Piece : setCell
Game -> Game : startGame()


@enduml


================================================
File: test1.puml
================================================
@startuml
!theme reddress-lightblue

'https://plantuml.com/fr/theme

'single line comment
/'multiple line comment
'/

title myDiagram


class com.inf5153.game.ConnectFour {
- int width
- char[][] grid
- int lastCol
+ String toString()
+ String horizontal()
+ String vertical()
+ String slashDiagonal()
+ String backslashDiagonal()
+ {static} boolean contains(String,String)
+ boolean isWinningPlay()
+ void chooseAndDrop(char,Scanner)
}

class com.inf5153.game.MyClass {
}
@enduml


================================================
File: src/main/java/Main.java
================================================
import java.util.Scanner;

import com.inf5153.game.ConnectFour;


public class Main {
	private static final char[] PLAYERS = {'R', 'Y'};
	public static void main(String[] args) {
	    // we assemble all the pieces of the puzzle for 
	    // building our Connect Four Game
	    try (Scanner input = new Scanner(System.in)) {
	      // we define some variables for our game like 
	      // dimensions and nb max of moves
	      int height = 6; int width = 8; int moves = height * width;

	      // we create the ConnectFour instance
	      ConnectFour board = new ConnectFour(width, height);

	      // we explain users how to enter their choices
	      System.out.println("Use 0-" + (width - 1) + " to choose a column");
	      // we display initial board
	      System.out.println(board);

	      // we iterate until max nb moves be reached
	      // simple trick to change player turn at each iteration
	      for (int player = 0; moves-- > 0; player = 1 - player) {
	        // symbol for current player
	        char symbol = PLAYERS[player];

	        // we ask user to choose a column
	        board.chooseAndDrop(symbol, input);

	        // we display the board
	        System.out.println(board);

	        // we need to check if a player won. If not, 
	        // we continue, otherwise, we display a message
	        if (board.isWinningPlay()) {
	          System.out.println("\nPlayer " + symbol + " wins!");
	          return;
	        }
	      }
	    
	      System.out.println("Game over. No winner. Try again!");
	    }
	  }
 
}

================================================
File: src/main/java/com/inf5153/game/ConnectFour.java
================================================
package com.inf5153.game;

import java.util.Arrays;
import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

// we are going to create a simple 2-players Connect Four implementation in Java 8
public class ConnectFour {

    // we define characters for players (R for Red, Y for Yellow)

    // dimensions for our board
    private final int width, height;
    // grid for the board
    private final char[][] grid;
    // we store last move made by a player
    private int lastCol = -1, lastTop = -1;

    public ConnectFour(int w, int h) {
        width = w;
        height = h;
        grid = new char[h][];

        // init the grid will blank cell
        for (int i = 0; i < h; i++) {
            Arrays.fill(grid[i] = new char[w], '.');
        }
    }

    // we use Streams to make a more concise method
    // for representing the board
    public String toString() {
        return IntStream.range(0, width).
                mapToObj(Integer::toString).
                collect(Collectors.joining()) +
                "\n" +
                Arrays.stream(grid).
                        map(String::new).
                        collect(Collectors.joining("\n"));
    }

    // get string representation of the row containing
    // the last play of the user
    public String horizontal() {
        return new String(grid[lastTop]);
    }

    // get string representation fo the col containing
    // the last play of the user
    public String vertical() {
        StringBuilder sb = new StringBuilder(height);

        for (int h = 0; h < height; h++) {
            sb.append(grid[h][lastCol]);
        }

        return sb.toString();
    }

    // get string representation of the "/" diagonal
    // containing the last play of the user
    public String slashDiagonal() {
        StringBuilder sb = new StringBuilder(height);

        for (int h = 0; h < height; h++) {
            int w = lastCol + lastTop - h;

            if (0 <= w && w < width) {
                sb.append(grid[h][w]);
            }
        }

        return sb.toString();
    }

    // get string representation of the "\"
    // diagonal containing the last play of the user
    public String backslashDiagonal() {
        StringBuilder sb = new StringBuilder(height);

        for (int h = 0; h < height; h++) {
            int w = lastCol - lastTop + h;

            if (0 <= w && w < width) {
                sb.append(grid[h][w]);
            }
        }

        return sb.toString();
    }

    // static method checking if a substring is in str
    public static boolean contains(String str, String substring) {
        return str.indexOf(substring) >= 0;
    }

    // now, we create a method checking if last play is a winning play
    public boolean isWinningPlay() {
        if (lastCol == -1) {
            System.err.println("No move has been made yet");
            return false;
        }

        char sym = grid[lastTop][lastCol];
        // winning streak with the last play symbol
        String streak = String.format("%c%c%c%c", sym, sym, sym, sym);

        // check if streak is in row, col,
        // diagonal or backslash diagonal
        return contains(horizontal(), streak) ||
                contains(vertical(), streak) ||
                contains(slashDiagonal(), streak) ||
                contains(backslashDiagonal(), streak);
    }

    // prompts the user for a column, repeating until a valid choice is made
    public void chooseAndDrop(char symbol, Scanner input) {
        do {
            System.out.println("\nPlayer " + symbol + " turn: ");
            int col = input.nextInt();

            // check if column is ok
            if (!(0 <= col && col < width)) {
                System.out.println("Column must be between 0 and " + (width - 1));
                continue;
            }

            // now we can place the symbol to the first
            // available row in the asked column
            for (int h = height - 1; h >= 0; h--) {
                if (grid[h][col] == '.') {
                    grid[lastTop = h][lastCol = col] = symbol;
                    return;
                }
            }

            // if column is full ==> we need to ask for a new input
            System.out.println("Column " + col + " is full.");
        } while (true);
    }


}

================================================
File: src/test/java/ConnectFour.java
================================================
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class ConnectFour {

    @Test
    public void connectFourTest(){
        // contexte
        ConnectFour connectFour = new ConnectFour();
        int a = 4;
        int b = 4;

        // attendu
        int attendu = 8;

        // test
        assertEquals(attendu,a+b);
    }
}


================================================
File: .github/workflows/java.yml
================================================
name: Java Continuous Integration

on: [push]

jobs:
  build_java:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Set up JDK 13
        uses: actions/setup-java@v1
        with:
          java-version: 13

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn -B package --file pom.xml

================================================
File: .github/workflows/puml.yml
================================================
name: generate plantuml

on: [push]

jobs:
  generate_plantuml:
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v1
        with:
          fetch-depth: 1

      - name: plantuml
        id: plantuml
        uses: grassedge/generate-plantuml-action@v1.5
        with:
          message: "Render PlantUML files"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


